ქვზი 5. 
ფაილში “text.txt” წერია ინგლისური ტექსტი (წინადადება და სააკუთარი სახელები იწყება დიდი ასოთი). გავიგოთ რამდენი დასრულებული წინადადება არის ამ ფაილში.
გავიგოთ აგრეთვე, რამდენი სიტყვაა ამ ფაილში, აგრეთვე საკუთარი სახელების რაოდენობა შევაფასოთ ქვემოდან (სულ მცირე რამდენი საკუთარი სახელია). 
მოიყვანეთ სიტყვიერი ახსნა, კოდი და მაგალითები თვალსაჩინოებისთვის. მითითება: ტექსტი გადაწერეთ სტრინგების ვექტორში და შემდეგ დაამუშავეთ ალგორითმების გამოყენებით. 


#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
    vector<string> text; // ადგილის სადაც ვინახავ ტექსტს
    string n; // მეხმარება ვექტორისა და while ის კომუნიკაციაში
    int sentence, name, char_sum; // მოცემული დავალებები რასაც უნდა გავცე პასუხი*
    auto isUpper = [](const char& a){
        return (a >= 'A' && a <= 'Z');
    };
    auto isSentence = [](const char& a){
        return (a == '.');
    };
    fstream ifs("text.txt");
    while(ifs >> n){ // ინფორმაციის წყაროს ამოწურვამდე მოცემულუ ინფორმაციას ვაწოდებ ვექტორს
        text.push_back(n); // ვექტორში უკან ჩამატება ტექსტის წინადადებების.
        // cout<<n;
        // პრედიკატის(არის თუ არა დიდი ასო) შემოწმების ადგილი რომლის ამუშავების შემთხვევაში name მიიღებს +1_ს
        for(auto e:n){
            if(isUpper(e)){
                name++;
            }
        }
        // პრდიკატის შემოწმების დასასრული
        // პრედიკატი საერთოდ არ გვჭირდება სიტყვების დათვლისას რადგან თვითონ ლუპის ამუშავება გულისხმობს სიტყვის არსებობსა :)
        char_sum++;
        // პრდიკატის შემოწმების დასასრული
        // პრედიკატის(მთავრდება თუ არა წინადადება) შემოწმების ადგილი რომლის ამუშავების შემთხვევაში char_sum მიიღებს +1_ს
        for(auto e:n){
            if(isSentence(e)){
                sentence++;
            }
        }
        // პრდიკატის შემოწმების დასასრული
    }
    cout<<"საკუთარი სახელების რაოდენობა: "<<name<<" "<<endl;
    cout<<"სიტყვების რაოდენობა: "<<char_sum<<" "<<endl;
    cout<<"წინადადებების რაოდენობა: "<<sentence;
}
